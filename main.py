# This is a sample Python script.
import random
import tkinter

import telebot
import pystray
from telebot import types
import os
import json
import PIL.ImageGrab
from PIL import Image, ImageGrab, ImageDraw
import ctypes
from telebot.types import ReactionTypeEmoji
import customtkinter as CTk
import GPUtil
import uptime
import datetime
from sound import Sound







MessageBox = ctypes.windll.user32.MessageBoxW



a = 0
b = 0

root = os.getcwd() #–£–∑–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

#os.startfile(f'{root}' + '\\tray.exe') #–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ç—Ä–µ—è

tokens = {'Bot' : '', 'You' : ''} #–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
passwords = {} #–ü–∞—Ä–æ–ª–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Passwords.json
pass2 = ''

if os.path.exists("first.mun"):

    pass
else:
    class App(CTk.CTk):

        def close(self):
            app.destroy()

        def get_token(self):
            newtoken = self.enter_token.get()
            tokens['Bot'] = newtoken
            print('–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ' + tokens['Bot'])
            with open('tokens.json', 'w') as file:
                json.dump(tokens, file)
            app.destroy()

        def get_id(self):
            newid = self.enter_id.get()

            tokens['You'] = newid
            print('–ù–æ–≤—ã–π Id: ' + tokens['You'])

            with open('tokens.json', 'w') as file:
                json.dump(tokens, file)
            self.enterid.grid_remove()
            self.enter_id.delete(0, 1000)
            self.entertoken.grid(row=0, column=0, padx=(0, 112))
            self.enter_id.grid_remove()
            self.button_ok.grid_remove()
            self.enter_token.grid(row=10, column=0, padx=(0, 0))
            self.button_ok1.grid(row=10, column=300, padx=(0, 0))

        def __init__(self):
            super().__init__()
            self.iconbitmap('logo.ico')
            self.geometry('600x180')
            self.title("MunPc 1.2")
            self.resizable(False, False)
            self.logo = CTk.CTkImage(dark_image=Image.open('logo.png'), size=(600, 100))
            self.logo_label = CTk.CTkLabel(master=self, text="", image=self.logo)

            self.logo_label.grid(row=0, column=0)
            self.font = CTk.CTkFont(family= 'Franklin Gothic Heavy', size = 20)
            self.first_frame = CTk.CTkFrame(master=self, fg_color='transparent')
            self.first_frame.grid(row=1, column=0, pady=(0, 0), sticky='nsew')

            self.enter_id = CTk.CTkEntry(master=self.first_frame, width=300)
            self.enter_id.grid(row=10, column=0, padx=(0, 0))

            self.enter_token = CTk.CTkEntry(master=self.first_frame, width=300)

            self.button_ok = CTk.CTkButton(master=self.first_frame, text='Ok', width=100, command=self.get_id)
            self.button_ok.grid(row=10, column=300, padx=(0, 0))

            self.button_ok1 = CTk.CTkButton(master=self.first_frame, text='Ok', width=100, command=self.get_token)

            self.enterid = CTk.CTkLabel(master=self.first_frame, text="–í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", font= self.font)
            self.enterid.grid(row=0, column=0, padx=(0, 70))

            self.entertoken = CTk.CTkLabel(master=self.first_frame, text="–í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ", font = self.font)


    if __name__ == '__main__':
        app = App()
        app.mainloop()
    f = open('first.mun', 'tw', encoding='utf-8')
    f.close



with open("Passwords.json", 'r', encoding='utf-8') as file:
    passwords = json.load(file)

with open("tokens.json", 'r', encoding='utf-8') as file:
    tokens = json.load(file)

me = tokens['You'] #Id–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
token = tokens['Bot'] #–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ botFather
bot = telebot.TeleBot(token)

if os.path.exists("two.mun"):
    pass
else:
    tglink = telebot.types.InlineKeyboardMarkup()
    tglink.add(telebot.types.InlineKeyboardButton(text='–ú–æ–π —Ç–≥ –∫–∞–Ω–∞–ª', url="https://t.me/Munbreak1"))
    bot.send_message(me, '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É!', reply_markup = tglink)
    f = open('two.mun', 'tw', encoding='utf-8')
    f.close


#–ö–Ω–æ–ø–∫–∏

btnoff = types.KeyboardButton('üî¥–í—ã–∫–ª—é—á–∏—Ç—å –ø–∫')
btnwinl = types.KeyboardButton('üîê–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å')
btntimeoff = types.KeyboardButton('‚è≥–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑...')
btnscreen = types.KeyboardButton('üì∑–°–∫—Ä–∏–Ω')
btnreset = types.KeyboardButton('‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å')
btnpass = types.KeyboardButton('üíª–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π')
btninfo = types.KeyboardButton('üå° –û –ø–∫')
btnvol = types.KeyboardButton('üîá –ó–≤—É–∫')
btnother1 = types.KeyboardButton('üß∞ –î—Ä—É–≥–æ–µ')
btnrand = types.KeyboardButton('üé∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
btnupd = types.KeyboardButton('üåê–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
btnother = types.KeyboardButton('üí°–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é')
btnid = types.KeyboardButton('üÜî –£–∑–Ω–∞—Ç—å id')
btnhours = types.KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å')
btnoff_cancel = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ')
btndice = types.KeyboardButton('üé≤ –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫')
updlink = telebot.types.InlineKeyboardMarkup()

btnback = types.KeyboardButton('‚è™–ù–∞–∑–∞–¥')
other_btn = types.InlineKeyboardMarkup()


updlink.add(telebot.types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', url="https://t.me/MunPc"))
other_btn.add(telebot.types.InlineKeyboardButton(text='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é', url="https://t.me/MunPcFeedBack_bot"))

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard= True, one_time_keyboard= False)
other_keyboard = types.ReplyKeyboardMarkup(resize_keyboard= True, one_time_keyboard= False)
id_keyboard = types.ReplyKeyboardMarkup(resize_keyboard= True, one_time_keyboard= False)
off_keyboard = types.ReplyKeyboardMarkup(resize_keyboard= True, one_time_keyboard= False)
off_timer_keyboard = types.ReplyKeyboardMarkup(resize_keyboard= True, one_time_keyboard= False)

btnid1 = types.KeyboardButton('üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', request_users=types.KeyboardButtonRequestUser(request_id=1))

main_keyboard.row(btnwinl, btnoff)
main_keyboard.row(btnscreen, btnreset)
main_keyboard.row(btntimeoff, btnpass)
main_keyboard.row(btninfo, btnvol)
main_keyboard.row(btnother1)
main_keyboard.row(btnupd, btnother)

other_keyboard.row(btnrand, btndice)
other_keyboard.row(btnid )
other_keyboard.row(btnback)
id_keyboard.row(btnid1)
id_keyboard.row(btnback)
off_keyboard.row(btnhours)
off_keyboard.row(btntimeoff)
off_keyboard.row(btnoff_cancel)
off_keyboard.row(btnback)

off_timer_keyboard.row(btnback)



#–ö–Ω–æ–ø–∫–∏ –ó–≤—É–∫
vol_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
volmax = types.KeyboardButton("–ó–≤—É–∫ –Ω–∞ 100")

btnmin = types.KeyboardButton("–ó–≤—É–∫ –Ω–∞ 0")
btnset = types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ ...")
btnhalf = types.KeyboardButton("–ó–≤—É–∫ –Ω–∞ 50")

#–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –∑–≤—É–∫–∞


vol_keyboard.row(volmax, btnset)
vol_keyboard.row(btnmin,btnhalf)
vol_keyboard.row(btnback)




if os.path.exists("two.mun"):
    bot.send_message(me, '–ö–æ–º–ø—å—é—Ç–µ—Ä –≤–∫–ª—é—á–∏–ª—Å—è!', reply_markup=main_keyboard)

else:
    pass





@bot.message_handler(content_types=["text", "users_shared"])

def start(sms):

    if sms.from_user.id == int(me):

        if sms.text == 'üî¥–í—ã–∫–ª—é—á–∏—Ç—å –ø–∫':
            os.system('shutdown -s /t 0 /f')
        elif sms.text == 'üîê–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å':
            ctypes.windll.user32.LockWorkStation()
        elif sms.text == "üì∑–°–∫—Ä–∏–Ω":

            bot.set_message_reaction(me, sms.message_id, [ReactionTypeEmoji("ü•±")], is_big=True)
            screen = PIL.ImageGrab.grab()
            screen.save("screen.png", "png")
            screen = Image.open("screen.png")
            bot.send_chat_action(me, "upload_photo")
            bot.send_photo(me, open("screen.png", "rb"))
            bot.set_message_reaction(me, sms.message_id, [ReactionTypeEmoji("üëç")], is_big=False)



        elif sms.text == '‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å':
            os.system('shutdown -r -t 00')
        elif sms.text == '‚è≥–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑...':
            bot.send_message(me, "‚è≥–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑...", reply_markup=off_keyboard)
            bot.register_next_step_handler(sms, timeoff)
        elif sms.text == 'üíª–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π':
            for key, value in passwords.items():
                global pass2
                pass2 += key + ":  " + value + ' | '
            bot.send_message(me, '–¢–≤–æ–∏ –ø–∞—Ä–æ–ª–∏:\n' + str(pass2))
            pass2 = ''
        elif sms.text == 'üåê–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ':
            bot.send_message(me, '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: 1.2 | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–∏–∂–µ', reply_markup= updlink)
        elif sms.text == 'üí°–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é':
            bot.send_message(me, '–ü—Ä–µ–¥–ª–∞–≥–∞–π –∏–¥–µ–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!', reply_markup=other_btn)
        elif sms.text == 'üå° –û –ø–∫':

            gpu = GPUtil.getGPUs()
            for gpu in gpu:
                gput = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU: {gpu.temperature} ¬∞C"

            time = uptime.uptime()
            time1 = convert_seconds(time)
            time3 = str(time1[:7])


            bot.send_message(me,gput + ' | ' + '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–∫: ' + time3)
        elif sms.text == 'üîá –ó–≤—É–∫':
            bot.send_message(me, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º üîá", reply_markup=vol_keyboard)
            bot.register_next_step_handler(sms, sound1)

        elif sms.text == 'üß∞ –î—Ä—É–≥–æ–µ':
            bot.send_message(me, "üß∞ –î—Ä—É–≥–æ–µ", reply_markup=other_keyboard)
            bot.register_next_step_handler(sms, other)


def other(sms):
    if sms.from_user.id == int(me):

        if sms.text == 'üé∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(me, '–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: ')


            bot.register_next_step_handler(sms, min_rand)

        elif sms.text == "‚è™–ù–∞–∑–∞–¥":
            back(sms)



        elif sms.text == 'üé≤ –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫':
            bot.send_dice(me, 'üé≤')
            bot.register_next_step_handler(sms, other)

        elif sms.text == 'üÜî –£–∑–Ω–∞—Ç—å id':
            bot.send_message(me, '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–±–æ—Ç–∞, Id –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å', reply_markup=id_keyboard)
            bot.register_next_step_handler(sms, get_id)
def back_other(sms):
    bot.send_message(me, 'üß∞ –î—Ä—É–≥–æ–µ', reply_markup=other_keyboard)
    bot.register_next_step_handler(sms, other)
def get_id(sms):

    try:
        id_get = sms.users_shared.user_ids[0]
        id_send = id_get.user_id
        bot.send_message(me, f'üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_send}', reply_markup=other_keyboard)
        bot.register_next_step_handler(sms, other)
    except:
        bot.send_message(me, 'üß∞ –î—Ä—É–≥–æ–µ', reply_markup=other_keyboard)
        bot.register_next_step_handler(sms, other)


def min_rand(sms):
    global a
    a = sms.text
    bot.send_message(me, '–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: ')
    bot.register_next_step_handler(sms, random1)


def random1(sms):
    b = sms.text

    try:
        rand = random.randint(int(a), int(b))
        bot.send_message(me, rand, reply_markup=other_keyboard )
        bot.register_next_step_handler(sms, other)
    except:
        bot.send_message(me, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', reply_markup=other_keyboard)
        bot.register_next_step_handler(sms, other)

def timeoff(sms):


    if sms.text == '‚è™–ù–∞–∑–∞–¥':
        back(sms)

    elif sms.text == '–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å':
        time2 = 3600
        os.system(f'shutdown -s -t {time2}')
        bot.send_message(me, "–ü–∫ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ —á–∞—Å")
        bot.register_next_step_handler(sms, timeoff)
        on_or_no =+ 1

    elif sms.text == '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ':
        os.system('shutdown /a')
        on_or_no = 0

        bot.send_message(me, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        bot.register_next_step_handler(sms, timeoff)

    elif sms.text == '‚è≥–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑...':
        bot.send_message(me, "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:", reply_markup=off_timer_keyboard)
        bot.register_next_step_handler(sms, off_timer)


def off_timer(sms):
    if sms.text == '‚è™–ù–∞–∑–∞–¥':
        bot.send_message(me, "‚è≥–í—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑...", reply_markup=off_keyboard)
        bot.register_next_step_handler(sms, timeoff)
    else:
        time1 = sms.text
        print(time1)
        os.system(f'shutdown -s -t {time1}')
        bot.send_message(me, "–ü–∫ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑: " + time1 + ' —Å', reply_markup=off_keyboard)
        bot.register_next_step_handler(sms, timeoff)
def sound1(sms):
	if sms.from_user.id == int(me):
		if sms.text == "–ó–≤—É–∫ –Ω–∞ 100":
			bot.send_chat_action(me, 'typing')
			try:
				Sound.volume_max()
				bot.send_message(me, "–£—Å—Ç–∞–Ω–æ–≤–∏–ª –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ 100")
				bot.register_next_step_handler(sms, sound1)
			except:
				bot.send_message(me,"–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω :( ")
				bot.register_next_step_handler(sms, sound1)
		elif sms.text == "–ó–≤—É–∫ –Ω–∞ 0":
			bot.send_chat_action(me, 'typing')
			try:
				Sound.volume_min()
				bot.send_message(me, "–£—Å—Ç–∞–Ω–æ–≤–∏–ª –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ 0")
				bot.register_next_step_handler(sms, sound1)
			except:
				bot.send_message(me,"–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω :( ")
				bot.register_next_step_handler(sms, sound1)
		elif sms.text == "–ó–≤—É–∫ –Ω–∞ 50":
			bot.send_chat_action(me, 'typing')
			try:
				Sound.volume_set(50)
				bot.send_message(me, "–£—Å—Ç–∞–Ω–æ–≤–∏–ª –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ 50")
				bot.register_next_step_handler(sms, sound1)
			except:
				bot.send_message(me,"–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω :( ")
				bot.register_next_step_handler(sms, sound1)

		elif sms.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ ...":
			bot.send_chat_action(me, 'typing')
			bot.send_message(me, "–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å:")
			bot.register_next_step_handler(sms, soundset)

		elif sms.text == "‚è™–ù–∞–∑–∞–¥":
			back(sms)

def soundset(sms):
	user_vol = sms.text
	try:
		bot.send_message(me, "–ì–æ—Ç–æ–≤–æ :)")
		Sound.volume_set(int(user_vol))
		bot.register_next_step_handler(sms, sound1)
	except:
		bot.send_message(me, "–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω :(")
		bot.register_next_step_handler(sms, sound1)

def back(sms):
	bot.register_next_step_handler(sms, start)
	bot.send_message(me, "–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup = main_keyboard)


def convert_seconds(seconds):
    return str(datetime.timedelta(seconds=seconds))






bot.infinity_polling(timeout=10, long_polling_timeout = 5)

